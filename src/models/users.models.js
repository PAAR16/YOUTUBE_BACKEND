import mongoose,{Schema} from "mongoose";
import jwt from "jsonwebtoken";
import bcrypt from "bcrypt"

const userSchema=new Schema({
    username:{
        type:String,
        required:true,
        unique:true,
        lowercase:true,
        trim:true,
        index:true,
    },
    email:{
        type:String,
        required:true,
        unique:true,
        lowercase:true,
        trim:true, 
    },
    fullname:{
        type:String,
        required:true,
        trim:true,
        index:true,
    },
    avatar:{
        type:String,
        required:true,
    },
    avatar:{
        type:String,
    },

    watchHistory:[
        {
            type:mongoose.Schema.Types.ObjectId,
            ref:"Video"
        }
    ],

    password:{
        type:String,
        required:[true,'password is required'],
    },

    refreshToken:{
        type:String
    }

},
{timestamps:true}
)

userSchema.pre("save",async function(next) {
    if(!this.isModified("password"))return next();
    this.password=await bcrypt.hash(this.password,10)
    next()
})

userSchema.methods.ispasswordcorrect=async function (password){
    return await bcrypt.compare(password,this.password)
}

userSchema.methods.generateAccesstoken= function(){
    return jwt.sign(
        {
            _id:this._id,//generated by mongodb
            email:this.email,
            username:this.username,
            fullname:this.fullname
        },
        process.env.ACCESS_TOKEN_SECRET,
        {
            expiresIn:process.env.ACCESS_TOKEN_EXPIRY
        }
    )
}
userSchema.methods.generateRefreshtoken= function(){
    return jwt.sign(
        {
            _id:this._id,//generated by mongodb
        },
        process.env.ACCESS_REFRESH_SECRET,
        {
            expiresIn:process.env.ACCESS_REFRESH_EXPIRY
        }
    )
}    

export const User=mongoose.model("User",userSchema);